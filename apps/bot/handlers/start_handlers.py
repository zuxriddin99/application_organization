import asyncio

from apps.bot.utils import check_permissions
from apps.main import models as main_models
from aiogram import types
from aiogram.dispatcher import FSMContext
from django.core.exceptions import ValidationError
from apps.bot import buttons as b
from apps.bot.constants import SLEEP_TIME
from apps.bot.dispatcher import dp
from apps.bot import button_text as b_t
from aiogram.dispatcher.filters import Text


@dp.message_handler(lambda x: x.chat.type == 'private', commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.answer(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.full_name}! –Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Zood. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞—Ç—å, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ üëá',
        reply_markup=b.first_b
    )


@dp.message_handler(lambda message: message.text == b_t.START)
async def ask_full_name_welcome(message: types.Message):
    """
    This handler will be called when user sends –ù–∞—á–∞—Ç—å
    """
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.\n')
    await message.answer('–ü—Ä–∏–º–µ—Ä üëá ')
    await message.answer('–§–ò–û:–ú–µ–ª—å–Ω–∏–∫–æ–≤–∞ –ö—Å–µ–Ω–∏—è –í–∏—Ç–∞–ª—å–µ–≤–Ω–∞')



@dp.message_handler(Text(startswith='–§–ò–û:'))
async def handler_full_name(message: types.Message):
    full_name = message.text.replace('–§–ò–û:', '')
    data = message.from_user
    client, _ = await main_models.Client.objects.aget_or_create(telegram_user_id=data.id,
                                                                defaults={'full_name': full_name,
                                                                          'telegram_user_name': data.full_name})
    await message.answer(
        f'{full_name}, –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', reply_markup=await b.get_categories_list_button()
    )


async def remove_old_messages(state: FSMContext):
    async with state.proxy() as data:
        messages = data['messages']
        for mess in messages:
            await mess.delete()
